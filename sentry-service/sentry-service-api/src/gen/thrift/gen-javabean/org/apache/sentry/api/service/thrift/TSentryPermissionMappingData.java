/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.sentry.api.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TSentryPermissionMappingData implements org.apache.thrift.TBase<TSentryPermissionMappingData, TSentryPermissionMappingData._Fields>, java.io.Serializable, Cloneable, Comparable<TSentryPermissionMappingData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSentryPermissionMappingData");

  private static final org.apache.thrift.protocol.TField PERMISSION_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("permissionMapping", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSentryPermissionMappingDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSentryPermissionMappingDataTupleSchemeFactory());
  }

  private Map<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>> permissionMapping; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PERMISSION_MAPPING((short)1, "permissionMapping");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERMISSION_MAPPING
          return PERMISSION_MAPPING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERMISSION_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("permissionMapping", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSentryAuthorizable.class), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSentryPrincipal.class), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPrivilege.class))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSentryPermissionMappingData.class, metaDataMap);
  }

  public TSentryPermissionMappingData() {
  }

  public TSentryPermissionMappingData(
    Map<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>> permissionMapping)
  {
    this();
    this.permissionMapping = permissionMapping;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSentryPermissionMappingData(TSentryPermissionMappingData other) {
    if (other.isSetPermissionMapping()) {
      Map<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>> __this__permissionMapping = new HashMap<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>>(other.permissionMapping.size());
      for (Map.Entry<TSentryAuthorizable, Map<TSentryPrincipal,List<TPrivilege>>> other_element : other.permissionMapping.entrySet()) {

        TSentryAuthorizable other_element_key = other_element.getKey();
        Map<TSentryPrincipal,List<TPrivilege>> other_element_value = other_element.getValue();

        TSentryAuthorizable __this__permissionMapping_copy_key = new TSentryAuthorizable(other_element_key);

        Map<TSentryPrincipal,List<TPrivilege>> __this__permissionMapping_copy_value = new HashMap<TSentryPrincipal,List<TPrivilege>>(other_element_value.size());
        for (Map.Entry<TSentryPrincipal, List<TPrivilege>> other_element_value_element : other_element_value.entrySet()) {

          TSentryPrincipal other_element_value_element_key = other_element_value_element.getKey();
          List<TPrivilege> other_element_value_element_value = other_element_value_element.getValue();

          TSentryPrincipal __this__permissionMapping_copy_value_copy_key = new TSentryPrincipal(other_element_value_element_key);

          List<TPrivilege> __this__permissionMapping_copy_value_copy_value = new ArrayList<TPrivilege>(other_element_value_element_value.size());
          for (TPrivilege other_element_value_element_value_element : other_element_value_element_value) {
            __this__permissionMapping_copy_value_copy_value.add(new TPrivilege(other_element_value_element_value_element));
          }

          __this__permissionMapping_copy_value.put(__this__permissionMapping_copy_value_copy_key, __this__permissionMapping_copy_value_copy_value);
        }

        __this__permissionMapping.put(__this__permissionMapping_copy_key, __this__permissionMapping_copy_value);
      }
      this.permissionMapping = __this__permissionMapping;
    }
  }

  public TSentryPermissionMappingData deepCopy() {
    return new TSentryPermissionMappingData(this);
  }

  @Override
  public void clear() {
    this.permissionMapping = null;
  }

  public int getPermissionMappingSize() {
    return (this.permissionMapping == null) ? 0 : this.permissionMapping.size();
  }

  public void putToPermissionMapping(TSentryAuthorizable key, Map<TSentryPrincipal,List<TPrivilege>> val) {
    if (this.permissionMapping == null) {
      this.permissionMapping = new HashMap<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>>();
    }
    this.permissionMapping.put(key, val);
  }

  public Map<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>> getPermissionMapping() {
    return this.permissionMapping;
  }

  public void setPermissionMapping(Map<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>> permissionMapping) {
    this.permissionMapping = permissionMapping;
  }

  public void unsetPermissionMapping() {
    this.permissionMapping = null;
  }

  /** Returns true if field permissionMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissionMapping() {
    return this.permissionMapping != null;
  }

  public void setPermissionMappingIsSet(boolean value) {
    if (!value) {
      this.permissionMapping = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PERMISSION_MAPPING:
      if (value == null) {
        unsetPermissionMapping();
      } else {
        setPermissionMapping((Map<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PERMISSION_MAPPING:
      return getPermissionMapping();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PERMISSION_MAPPING:
      return isSetPermissionMapping();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSentryPermissionMappingData)
      return this.equals((TSentryPermissionMappingData)that);
    return false;
  }

  public boolean equals(TSentryPermissionMappingData that) {
    if (that == null)
      return false;

    boolean this_present_permissionMapping = true && this.isSetPermissionMapping();
    boolean that_present_permissionMapping = true && that.isSetPermissionMapping();
    if (this_present_permissionMapping || that_present_permissionMapping) {
      if (!(this_present_permissionMapping && that_present_permissionMapping))
        return false;
      if (!this.permissionMapping.equals(that.permissionMapping))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_permissionMapping = true && (isSetPermissionMapping());
    list.add(present_permissionMapping);
    if (present_permissionMapping)
      list.add(permissionMapping);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSentryPermissionMappingData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPermissionMapping()).compareTo(other.isSetPermissionMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissionMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionMapping, other.permissionMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSentryPermissionMappingData(");
    boolean first = true;

    sb.append("permissionMapping:");
    if (this.permissionMapping == null) {
      sb.append("null");
    } else {
      sb.append(this.permissionMapping);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetPermissionMapping()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'permissionMapping' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSentryPermissionMappingDataStandardSchemeFactory implements SchemeFactory {
    public TSentryPermissionMappingDataStandardScheme getScheme() {
      return new TSentryPermissionMappingDataStandardScheme();
    }
  }

  private static class TSentryPermissionMappingDataStandardScheme extends StandardScheme<TSentryPermissionMappingData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSentryPermissionMappingData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PERMISSION_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map228 = iprot.readMapBegin();
                struct.permissionMapping = new HashMap<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>>(2*_map228.size);
                TSentryAuthorizable _key229;
                Map<TSentryPrincipal,List<TPrivilege>> _val230;
                for (int _i231 = 0; _i231 < _map228.size; ++_i231)
                {
                  _key229 = new TSentryAuthorizable();
                  _key229.read(iprot);
                  {
                    org.apache.thrift.protocol.TMap _map232 = iprot.readMapBegin();
                    _val230 = new HashMap<TSentryPrincipal,List<TPrivilege>>(2*_map232.size);
                    TSentryPrincipal _key233;
                    List<TPrivilege> _val234;
                    for (int _i235 = 0; _i235 < _map232.size; ++_i235)
                    {
                      _key233 = new TSentryPrincipal();
                      _key233.read(iprot);
                      {
                        org.apache.thrift.protocol.TList _list236 = iprot.readListBegin();
                        _val234 = new ArrayList<TPrivilege>(_list236.size);
                        TPrivilege _elem237;
                        for (int _i238 = 0; _i238 < _list236.size; ++_i238)
                        {
                          _elem237 = new TPrivilege();
                          _elem237.read(iprot);
                          _val234.add(_elem237);
                        }
                        iprot.readListEnd();
                      }
                      _val230.put(_key233, _val234);
                    }
                    iprot.readMapEnd();
                  }
                  struct.permissionMapping.put(_key229, _val230);
                }
                iprot.readMapEnd();
              }
              struct.setPermissionMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSentryPermissionMappingData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.permissionMapping != null) {
        oprot.writeFieldBegin(PERMISSION_MAPPING_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP, struct.permissionMapping.size()));
          for (Map.Entry<TSentryAuthorizable, Map<TSentryPrincipal,List<TPrivilege>>> _iter239 : struct.permissionMapping.entrySet())
          {
            _iter239.getKey().write(oprot);
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, _iter239.getValue().size()));
              for (Map.Entry<TSentryPrincipal, List<TPrivilege>> _iter240 : _iter239.getValue().entrySet())
              {
                _iter240.getKey().write(oprot);
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter240.getValue().size()));
                  for (TPrivilege _iter241 : _iter240.getValue())
                  {
                    _iter241.write(oprot);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSentryPermissionMappingDataTupleSchemeFactory implements SchemeFactory {
    public TSentryPermissionMappingDataTupleScheme getScheme() {
      return new TSentryPermissionMappingDataTupleScheme();
    }
  }

  private static class TSentryPermissionMappingDataTupleScheme extends TupleScheme<TSentryPermissionMappingData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSentryPermissionMappingData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.permissionMapping.size());
        for (Map.Entry<TSentryAuthorizable, Map<TSentryPrincipal,List<TPrivilege>>> _iter242 : struct.permissionMapping.entrySet())
        {
          _iter242.getKey().write(oprot);
          {
            oprot.writeI32(_iter242.getValue().size());
            for (Map.Entry<TSentryPrincipal, List<TPrivilege>> _iter243 : _iter242.getValue().entrySet())
            {
              _iter243.getKey().write(oprot);
              {
                oprot.writeI32(_iter243.getValue().size());
                for (TPrivilege _iter244 : _iter243.getValue())
                {
                  _iter244.write(oprot);
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSentryPermissionMappingData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map245 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.permissionMapping = new HashMap<TSentryAuthorizable,Map<TSentryPrincipal,List<TPrivilege>>>(2*_map245.size);
        TSentryAuthorizable _key246;
        Map<TSentryPrincipal,List<TPrivilege>> _val247;
        for (int _i248 = 0; _i248 < _map245.size; ++_i248)
        {
          _key246 = new TSentryAuthorizable();
          _key246.read(iprot);
          {
            org.apache.thrift.protocol.TMap _map249 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            _val247 = new HashMap<TSentryPrincipal,List<TPrivilege>>(2*_map249.size);
            TSentryPrincipal _key250;
            List<TPrivilege> _val251;
            for (int _i252 = 0; _i252 < _map249.size; ++_i252)
            {
              _key250 = new TSentryPrincipal();
              _key250.read(iprot);
              {
                org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val251 = new ArrayList<TPrivilege>(_list253.size);
                TPrivilege _elem254;
                for (int _i255 = 0; _i255 < _list253.size; ++_i255)
                {
                  _elem254 = new TPrivilege();
                  _elem254.read(iprot);
                  _val251.add(_elem254);
                }
              }
              _val247.put(_key250, _val251);
            }
          }
          struct.permissionMapping.put(_key246, _val247);
        }
      }
      struct.setPermissionMappingIsSet(true);
    }
  }

}

